CREATE TABLE ADMIN_ROLE (
	ID		INTEGER,
	NAME	VARCHAR NOT NULL,
	DESCRIPTION	VARCHAR,
	CREATED_AT	TIMESTAMP WITHOUT time zone default current_timestamp,
	CONSTRAINT ADMIN_ROLE_PK PRIMARY KEY (ID),
	CONSTRAINT ADMIN_ROLE_NAME_UQ UNIQUE (NAME)
);

INSERT INTO ADMIN_ROLE(ID, NAME, DESCRIPTION) VALUES (0, 'SUPERUSER', 'Super Usuario');
INSERT INTO ADMIN_ROLE(ID, NAME, DESCRIPTION) VALUES (1, 'ADMIN_ACCESS', 'Acceso a herramientas administrativas.');
INSERT INTO ADMIN_ROLE(ID, NAME, DESCRIPTION) VALUES (2, 'CALLCENTER', 'Acceso a funcionalidades de agregar asistentes.');
INSERT INTO ADMIN_ROLE(ID, NAME, DESCRIPTION) VALUES (3, 'CALLCENTER_SUP', 'Acceso a metodos de pago Complimentary y aplicacion de descuentos con cupones.');
INSERT INTO ADMIN_ROLE(ID, NAME, DESCRIPTION) VALUES (4, 'REPORTS', 'Acceso a funcionalidades de reportes.');
INSERT INTO ADMIN_ROLE(ID, NAME, DESCRIPTION) VALUES (5, 'FRAUD', 'Permite acceso a las listas negras de fraude');
INSERT INTO ADMIN_ROLE(ID, NAME, DESCRIPTION) VALUES (6, 'FRAUD_SUP', 'Permite realizar cambios en las listas negras de fraude');

CREATE TABLE ADMIN_FUNCTION (
	ID	INTEGER,
	NAME	VARCHAR NOT NULL,
	DESCRIPTION VARCHAR NOT NULL,
	CREATED_AT	TIMESTAMP WITHOUT time zone default current_timestamp,
	CONSTRAINT ADMIN_FUNCTION_PK PRIMARY KEY (ID),
	CONSTRAINT ADMIN_FUNCTION_NAME_UQ UNIQUE (NAME)
);

INSERT INTO ADMIN_FUNCTION(ID, NAME, DESCRIPTION) VALUES (1, 'LOGIN', 'Permite ingresar al sistema administrativo.');
INSERT INTO ADMIN_FUNCTION(ID, NAME, DESCRIPTION) VALUES (2, 'ADD_ATTENDEE', 'Permite agregar nuevos asistentes.');
INSERT INTO ADMIN_FUNCTION(ID, NAME, DESCRIPTION) VALUES (3, 'ADD_ATTENDEES', 'Permite agregar asistentes en bloque.');
INSERT INTO ADMIN_FUNCTION(ID, NAME, DESCRIPTION) VALUES (4, 'COMPLIMENTARY', 'Permite usar el método de pago gratuito Complimentary');
INSERT INTO ADMIN_FUNCTION(ID, NAME, DESCRIPTION) VALUES (5, 'DISCOUNT', 'Permite aplicar cupones en las compras del callcenter');
INSERT INTO ADMIN_FUNCTION(ID, NAME, DESCRIPTION) VALUES (6, 'REPORTS', 'Permite obtener información de reportes.');
INSERT INTO ADMIN_FUNCTION(ID, NAME, DESCRIPTION) VALUES (7, 'RESTRICT_EVENT', 'Permite especificar restricciones en los eventos.');
INSERT INTO ADMIN_FUNCTION(ID, NAME, DESCRIPTION) VALUES (8, 'BLACKLIST_QUERY', 'Acceso a consulta de lista negra.');
INSERT INTO ADMIN_FUNCTION(ID, NAME, DESCRIPTION) VALUES (9, 'BLACKLIST_CLEAN', 'Permite eliminar registros de la lista negra.');


CREATE TABLE ADMIN_ROLE_FUNCTION (
	ADMIN_ROLE_ID	INTEGER,
	ADMIN_FUNCTION_ID	INTEGER,
	ASSOCIATED_AT	TIMESTAMP WITHOUT time zone default current_timestamp,
	CONSTRAINT ADMIN_ROLE_FUNCTION_PK PRIMARY KEY (ADMIN_ROLE_ID, ADMIN_FUNCTION_ID)
);

INSERT INTO ADMIN_ROLE_FUNCTION(ADMIN_ROLE_ID, ADMIN_FUNCTION_ID) VALUES (1, 1);
INSERT INTO ADMIN_ROLE_FUNCTION(ADMIN_ROLE_ID, ADMIN_FUNCTION_ID) VALUES (2, 2);
INSERT INTO ADMIN_ROLE_FUNCTION(ADMIN_ROLE_ID, ADMIN_FUNCTION_ID) VALUES (2, 3);
INSERT INTO ADMIN_ROLE_FUNCTION(ADMIN_ROLE_ID, ADMIN_FUNCTION_ID) VALUES (3, 4);
INSERT INTO ADMIN_ROLE_FUNCTION(ADMIN_ROLE_ID, ADMIN_FUNCTION_ID) VALUES (3, 5);
INSERT INTO ADMIN_ROLE_FUNCTION(ADMIN_ROLE_ID, ADMIN_FUNCTION_ID) VALUES (3, 7);
INSERT INTO ADMIN_ROLE_FUNCTION(ADMIN_ROLE_ID, ADMIN_FUNCTION_ID) VALUES (4, 6);
INSERT INTO ADMIN_ROLE_FUNCTION(ADMIN_ROLE_ID, ADMIN_FUNCTION_ID) VALUES (5, 8);
INSERT INTO ADMIN_ROLE_FUNCTION(ADMIN_ROLE_ID, ADMIN_FUNCTION_ID) VALUES (6, 9);


CREATE TABLE CUSTOMER_USER_ADMIN_ROLE (
	CUSTOMER_USER_ID	BIGINT NOT NULL,
	ADMIN_ROLE_ID	INTEGER NOT NULL,
	ASSOCIATED_AT	TIMESTAMP without time zone default current_timestamp,
	CONSTRAINT CUSTOMER_USER_ADMIN_ROLE_PK PRIMARY KEY (CUSTOMER_USER_ID, ADMIN_ROLE_ID),
	CONSTRAINT CUSTOMER_USER_ADMIN_ROLE_CU_FK FOREIGN KEY (CUSTOMER_USER_ID) REFERENCES CUSTOMER_USER(ID) ON DELETE CASCADE,
	CONSTRAINT CUSTOMER_USER_ADMIN_ROLE_ROLE_FK FOREIGN KEY (ADMIN_ROLE_ID) REFERENCES ADMIN_ROLE(ID) ON DELETE CASCADE
); 


INSERT INTO METHOD (NAME, DESCRIPTION, IMPLEMENTOR_CLASS, METHOD_TYPE_ID, MODULE_ID) VALUES ('findCustomerUserAdminProfile','Method for get the customer user admin profile.', 'com.us.weavx.core.services.impl.FindCustomerUserAdminProfileMethodImpl',3,5);
INSERT INTO METHOD (NAME, DESCRIPTION, IMPLEMENTOR_CLASS, METHOD_TYPE_ID, MODULE_ID) VALUES ('associateAdminRolesToCustomerUser','Method for associate admin roles to customer user.', 'com.us.weavx.core.services.impl.AsoociateAdminRolesToCustomerUserMethodImpl',3,5);
INSERT INTO METHOD (NAME, DESCRIPTION, IMPLEMENTOR_CLASS, METHOD_TYPE_ID, MODULE_ID) VALUES ('listAllAdminRoles','Method for associate admin roles to customer user.', 'com.us.weavx.core.services.impl.ListAllAdminRolesMethodImpl',3,5);
INSERT INTO METHOD (NAME, DESCRIPTION, IMPLEMENTOR_CLASS, METHOD_TYPE_ID, MODULE_ID) VALUES ('loadAdminCustomerUsers','Method for load admin customer users with their roles.', 'com.us.weavx.core.services.impl.AddAdminUsersMethodImpl',3,5);

